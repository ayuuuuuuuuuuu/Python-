# 1.字符串拼接（仅限纯字符串类型）
# 串直接拼接
print("啦啦啦"+"吼吼吼")
print("-----------------------------------")
# 字面量+变量
A = "哒哒哒"
print("啦啦啦"+A)
print("-----------------------------------")
# 变量+变量
B = "嘿嘿嘿"
C = "哈哈哈"
print(B+C)
print("-----------------------------------")
print("我先一个"+A+"再一个"+B+"反手再一个"+C)
# 分割----------------------------------------------------------------------
print("-----------------------------------")
# 2.字符串格式化
D = "人不吃饭"
# 将D拼接到%s的位置
E = "%s就会死" % D
print(E)                  # 完成拼接后在进行输出
print("%s就会死" % D)      # 在print语句中格式化拼接输出
# 在print语句中直接拼接以为变量的形式变量
F = "吃不饱"
G = "就会饿"
print(F,"%s" %G)   # 将G拼接到%s的位置
# 分割----------------------------------------------------------------------
print("-----------------------------------")
# 多个拼接
H = "吃饱了"
I = "就吃饱了"
J = "没吃饱"
K = "所以没吃饱"
# print中直接输出
print("%s%s%s%s" % (H,I,J,K))  # 多个值格式化拼接时前后顺序一一对应
M = "%s%s%s%s"% (H,I,J,K)
print(M) # 转移到一个变量值后再输出
# 分割----------------------------------------------------------------------
print("-----------------------------------")
# 使用格式化拼接可以实现数字（整数，浮点等）与字符串的拼接
N = 100
O = 1.2
P = "大于"
print("%s%s%s" %(N,P,O))   # 在print语句中格式化拼接输出
Q = "啦啦啦%s%s%s" %(N,P,O)
print(type(Q),Q)                 #  完成拼接后在进行输出

# 字符串格式化拼接是值将变量格式化为字符串（string）形式后再放入由%s标记的拼接的位置
# 数字（整数，浮点等类型）在拼接后所返回的值类型为字符串
# 拼接数字（整数，浮点等类型）可使用 ” %d “(整数) ” %f “（浮点数）来使拼接后的数字保留原始值的数据类型
# 格式化拼接基于数据类型的转换进行，和E:\pycharm-Project\003-ShuJu\ShuJuLeiXingZhuanHuan.py中的数据类型转换遵循相同原则
R = "%d%s%f" %(N,P,O)
print(type(R),R)
# 分割----------------------------------------------------------------------
print("-----------------------------------")
# 3.格式化字符串中的精度控制
# 在以上将 ”O = 1.2“该变量 以 %f(浮点类型)进行格式化拼接时，未进行浮点数精度控制，至最终输出为1.200000
# 使用辅助符号 ”m.n“ 来控制数据的宽度和精度
# 在标识占位符时使用，例如 %5d、%.2f 5为m位，2为n位
S = 55
print("%5d" %S)  # m位=5表示值放入此位置后将数字的值控制在五位，由于值原本不足五位，会在数字前用空格补足,设置的值小于被操作值本身时，将被忽略不生效，m值只会对值进行补位，不会舍弃
T = 1.167
print("%.2f" %T) # .n位表示保留几位小数，对小数进行四舍五入，位数不足时 补零
U = 1.11
print("%.5f" %U)
V = 20.246
print("%6.2f" %V) # 同时使用m.n时，小数部分（包括小数点）也算入m值的宽度控制
# 分割----------------------------------------------------------------------
print("-----------------------------------")
# 4.字符串快速格式化
# f ” 变量内容{变量名} “(f=format)
# 放入变量原本类型，无法自定义，不可做精度控制
W = 500
X = 6.66
print(f"100={W},6.66={X}")
# 分割----------------------------------------------------------------------
print("-----------------------------------")
# 5.表达式的字符串格式化
# 表达式：1.一条代码语句 2.具有明确的执行结果（运算表达式，变量的赋值语句,type()等语句）
# 格式化拼接变量运算表达式
Y = 2**10
Z = 2
print("%d" %(Y*Z))
print(f"{Y*Z}")
# 直接格式化拼接数值表达式
print("%d" %(1+1))
print(f"{1+1}")
# 格式化拼接其他表达式
print("变量Z的数据类型是%s" % (type(Z)))
print(f"变量X的数据类型是{type(X)}")













